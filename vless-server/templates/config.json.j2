{
    "log": {
        "loglevel": "debug"
    },
    "inbounds": [
        {
            "listen": "0.0.0.0",
            "port": 443, 
            "protocol": "vless",
            "settings": {
                "clients": [
                    {
                        "id": "{{ xuuid1 }}", // xray uuid
                        "flow": "xtls-rprx-vision",
                        "email": "client1@{{ domain_name }}"
                    },
                    {
                         "id": "{{ xuuid2 }}",
                         "flow": "xtls-rprx-vision",
                         "email": "client2@{{ domain_name }}"
                     },
                     {
                         "id": "{{ xuuid3 }}",
                         "flow": "xtls-rprx-vision",
                         "email": "client3@{{ domain_name }}"
                     },
                     {
                         "id": "{{ xuuid4 }}",
                         "flow": "xtls-rprx-vision",
                         "email": "client4@{{ domain_name }}"
                     },
                     {
                         "id": "{{ xuuid5 }}",
                         "flow": "xtls-rprx-vision",
                         "email": "client5@{{ domain_name }}"
                     }
                ],
                "decryption": "none"
            },
            "streamSettings": {
                "network": "raw",
                "security": "reality",
                "realitySettings": {
                    "dest": "{{ domain_name }}:443", // A website that support TLS1.3 and h2. You can also use `1.1.1.1:443` as dest
                    "serverNames": [
                        "{{ domain_name }}",
                        "www.{{ domain_name }}",
                        "developers.{{ domain_name }}"
                    ],
                    "privateKey": "{{ PrivateKey }}", // run `xray x25519` to generate. Public and private keys need to be corresponding.
                    "shortIds": [                // Required, list of shortIds available to clients, can be used to distinguish different clients
                        "{{ suuid_1 }}",                     // If this item exists, client shortId can be empty
                        "{{ suuid_2 }}",          // 0 to f, length is a multiple of 2, maximum length is 16
                        "{{ suuid_3 }}",
                        "{{ suuid_4 }}",
                        "{{ suuid_5 }}"
                    ]
                }
            },
            "sniffing": {

                "enabled": true,
                "destOverride": [
                    "http",
                    "tls"
                ],
                "routeOnly": true
            }
        }
    ],
    "outbounds": [
        {
            "protocol": "freedom",
            "tag": "direct"
        },
        {
            "protocol": "blackhole",
            "tag": "block"
        }
    ]
}
